@model Orcamentos.Models.OrcamentoNome

@{
	var listaOrcamentos = (IEnumerable<Orcamento>)TempData["listaOrcamentos"];
    ViewData["Title"] = "Detalhes";
}

<h1>Detalhes</h1>

<div class="mb-5">
    <h4>Nome dos Orçamentos</h4>
    <hr />
    <dl class="row">
		<dd class="d-none" id="orcamentoNomeId">
			@Html.DisplayFor(model => model.Id)
		</dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Nome)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Nome)
        </dd>
        <dt class = "col-sm-2">
            Criado por:
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CreatedBy)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Ativo)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Ativo)
        </dd>
    </dl>
</div>
<div>
	<h2>Orçamentos</h2>
	<div class="mb-3">
		<button class="btn btn-success" onclick="changeTable()" id="changeTableButton">Mostrar Excel</button>
	</div>
	
	<table class="table" id="orcamentosTable">
		<thead>
			<tr>
				<th>
					Nome do orçamento
				</th>
				<th>
					Perfil
				</th>
				<th>
					Tipo de Rendimento
				</th>
				<th>
					Unidade de Negocio
				</th>
				<th>
					Marca
				</th>
				<th>
					Tipo de Unidade
				</th>
				<th>
					Part Number
				</th>
				<th>
					Modelo
				</th>
				<th>
					Numero de serie
				</th>
				<th>
					Nome de produto
				</th>
				<th>
					Quantidade
				</th>
				<th>
					Custo total
				</th>
				<th>
					Preço total
				</th>
				<th>
					Ativo
				</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@{
				int i = 0;
			}
			@foreach (var item in listaOrcamentos)
			{
				<tr>
					<td>
						@Html.DisplayFor(modelItem => item.OrcamentoNome.Nome)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Profile.Name)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.RevenueType.Nome)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.BusinessUnit.Name)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Marca)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.TipoUni)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Partnumb)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.modelo)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.SerialNumb)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.ProductName)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Quantidade)
					</td>
					<td id="@("TotalCost"+i)" class="totalCost">
                    @Html.DisplayFor(modelItem => item.TotalCost)
                    </td>
                    <td id="@("TotalPrice"+i)">
                    @Html.DisplayFor(modelItem => item.TotalPrice)
                    </td>
					<td>
						@Html.DisplayFor(modelItem => item.Ativo)
					</td>
					<td>
						<div class="btn-group" role="group" >
								<div>
									<a asp-action="Details" asp-controller="Orcamentos" asp-route-id="@item.Id" class="btn btn-success rounded-0 rounded-start">
										<i class="bi bi-file-text-fill btn-icon mr-2"></i>
									</a>
								</div>
								<div>
									<a asp-action="Edit" asp-controller="Orcamentos" asp-route-id="@item.Id" class="btn btn-primary rounded-0">
										<i class="bi bi-pencil-square btn-icon mr-2"></i>
									</a>
								</div>
								<div>
									<button type="button" class="btn btn-danger rounded-0 rounded-end" id="@("EliminarButton"+i)" data-id="@item.Id" onclick="showModalDelete(this.id)">
										<i class="bi bi-trash3-fill btn-icon mr-2"></i>
									</button>
								</div>
							</div>
					</td>
				</tr>
				i++;
			}
		</tbody>
	</table>

	<div class="modal fade" id="eliminarModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title text-break" id="eliminarModalNome">Eliminar Orçamento Nº</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body text-break" >
				Tem a certeza que pretende eliminar o Orçamento Nº<span id="eliminarModalDesc"></span> ? <h6>Esta ação não pode ser desfeita</h6>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
				<form id="eliminarModalForm" method="POST">
					<button type="submit" class="btn btn-danger">Eliminar</button>
				</form>
			</div>
		</div>
	</div>
</div>
</div>
<div id="excelTable" class="d-none mb-3">
	<div class="mb-3" id="excelOrcamentos"></div>
	<button class="btn btn-success" id="save-button">Guardar</button>
	<button class="btn btn-success" id="addRowButton" >Adicionar linha</button>
	<button class="btn btn-success" id="export-file" >Guardar CSV</button>
	<button class="btn btn-success" id="btnPDF" >Guardar PDF</button>

	<div class="d-none" id="excelOrcamentos2"></div>
</div>

<div>
	<a asp-action="Edit" class="btn btn-primary" asp-route-id="@Model?.Id">Editar</a>
	<a asp-action="Index" class="btn btn-primary">Voltar para a lista</a>
</div>

<script>

	function showModalDelete(id){

		var id_value = document.getElementById(id);
		const idOrcamento = id_value.getAttribute("data-id");

		document.getElementById('eliminarModalForm').setAttribute("action", "/Orcamentos/Delete/"+idOrcamento); 
        document.getElementById('eliminarModalNome').innerHTML = "Eliminar Orçamento Nº" + idOrcamento;
        document.getElementById('eliminarModalDesc').innerHTML = idOrcamento;

		$("#eliminarModal").modal("show");
	}

		let euro = new Intl.NumberFormat('pt-PT', {
        style: 'currency',
        currency: 'EUR',
    });

	var buttonTable = document.getElementById("changeTableButton")

	function changeTable() {

		var table = document.getElementById("orcamentosTable");
		var excel = document.getElementById("excelTable")

		if (excel.classList.contains('d-none')) {
			table.classList.add('d-none')
			excel.classList.remove('d-none')
			buttonTable.innerHTML = "Mostrar Tabela"
		}
		else {
			table.classList.remove('d-none')
			excel.classList.add('d-none')
			buttonTable.innerHTML = "Mostrar Excel"
		}

	}

	document.addEventListener('DOMContentLoaded', function () {

		var data = @Html.Raw(Json.Serialize(listaOrcamentos
			.Select(o => new {
			o.Id,
			OrcamentoNomeId = o.orcamentoNomeId,
			OrcamentoName = o.OrcamentoNome.Nome,
			ProfileId = o.profileId,
			ProfileName = o.Profile.Name,
			RevenueTypeId = o.revenueTypeId,
			RevenueTypeName = o.RevenueType.Nome,
			BusinessUnitId = o.businessUnitId,
			BusinessUnitName = o.BusinessUnit.Name,
			o.Marca,
			o.TipoUni,
			o.Partnumb,
			o.modelo,
			o.SerialNumb,
			o.ProductName,
			o.Quantidade,
			o.UnitPrice,
			o.UnitCost,
			o.DescontoTabela,
			o.PrecoParcial,
			o.CustoTabela,
			o.CustoDesc1,
			o.CustoDesc2,
			o.CustoDesc3,
			o.TotalCost,
			o.TotalPrice,
			o.Margin,
			o.MG,
			o.Ativo
			})));

		var colHeaders = [
			'ID',
			'Orçamento Nome ID',
			'Orçamento Nome',
			'Perfil ID',
			'Perfil',
			'Tipo de Rendimento ID',
			'Tipo de Rendimento',
			'Unidade de Negócio ID',
			'Unidade de Negócio',
			'Marca',
			'Tipo de Unidade',
			'Part Number',
			'Modelo',
			'Número de Série',
			'Nome do Produto',
			'Quantidade',
			'Preço de Unidade Diário',
			'Custo de Unidade Diário',
			'Desconto Tabela',
			'Preço Parcial',
			'Custo Tabela',
			'Custo Desconto 1',
			'Custo Desconto 2',
			'Custo Desconto 3',
			'Custo Total',
			'Preço Total',
			'Margem',
			'MG',
            'Ativo'];

		var container = document.getElementById('excelOrcamentos');

		var mList = @Html.Raw(Json.Serialize(ViewBag.profilesList));
		var result = mList.map((item) => item.text)
		var mList2 = @Html.Raw(Json.Serialize(ViewBag.revenueTypesList));
		var result2 = mList2.map((item) => item.text)
		var mList3 = @Html.Raw(Json.Serialize(ViewBag.businessUnitsList));
		var result3 = mList3.map((item) => item.text)
		var mList4 = @Html.Raw(Json.Serialize(ViewBag.orcamentosNomesList));
		var result4 = mList4.map((item) => item.text)

		const formatEUR = {
			pattern: '0,0.00 $',
			culture: 'pt-PT',
		};

		var hot = new Handsontable(container, {
			data: data,
			colHeaders: colHeaders,
			columns: [
					{ data: 'id', readOnly: true },
				{ data: 'orcamentoNomeId', readOnly: true },
				{ data: 'orcamentoName', type: 'dropdown', source: result4 },
				{ data: 'profileId', readOnly: true }, //o id do profile deve coincidir com o profile selecionado
				{ data: 'profileName', type: 'dropdown', source: result },
				{ data: 'revenueTypeId', readOnly: true },
				{ data: 'revenueTypeName', type: 'dropdown', source: result2 },
				{ data: 'businessUnitId', readOnly: true },
				{ data: 'businessUnitName', type: 'dropdown', source: result3 },
				{ data: 'marca', type: 'text' },
				{ data: 'tipoUni', type: 'text' },
				{ data: 'partnumb', type: 'numeric' },
				{ data: 'modelo', type: 'text' },
				{ data: 'serialNumb', type: 'numeric' },
				{ data: 'productName', type: 'text' },
				{ data: 'quantidade', type: 'numeric' },
				{ data: 'unitPrice', type: 'numeric', numericFormat: formatEUR },
				{ data: 'unitCost', type: 'numeric', numericFormat: formatEUR },
				{ data: 'descontoTabela', type: 'numeric', numericFormat: formatEUR },
				{ data: 'precoParcial', type: 'numeric', numericFormat: formatEUR },
				{ data: 'custoTabela', type: 'numeric', numericFormat: formatEUR },
				{ data: 'custoDesc1', type: 'numeric', numericFormat: formatEUR },
				{ data: 'custoDesc2', type: 'numeric', numericFormat: formatEUR },
				{ data: 'custoDesc3', type: 'numeric', numericFormat: formatEUR },
				{ data: 'totalCost', type: 'numeric', numericFormat: formatEUR },
				{ data: 'totalPrice', type: 'numeric', numericFormat: formatEUR },
				{ data: 'margin', type: 'numeric', numericFormat: formatEUR },
				{ data: 'mg', type: 'numeric', numericFormat: formatEUR },
				{ data: 'ativo', type: 'checkbox' }
			],
			afterChange: function (changes, source) {
				if (source === 'edit') {
					var unitCostCol = hot.getDataAtCol(16);
					var unitPriceCol = hot.getDataAtCol(15);

					changes.forEach(function (change) {
						var row = change[0];
						var prop = change[1];
						var newValue = change[3];

						if (prop === 'profileName') {
							var profile = mList.find(function (p) { return p.text === newValue; });
							hot.setDataAtCell(row, hot.propToCol('profileId'), profile.value);
						}
						if (prop === 'orcamentoName') {
							var profile2 = mList4.find(function (p) { return p.text === newValue; });
							hot.setDataAtCell(row, hot.propToCol('orcamentoNomeId'), profile2.value);
						}
						if (prop === 'revenueTypeName') {
							var profile3 = mList2.find(function (p) { return p.text === newValue; });
							hot.setDataAtCell(row, hot.propToCol('revenueTypeId'), profile3.value);
						}
						if (prop === 'businessUnitName') {
							var profile4 = mList3.find(function (p) { return p.text === newValue; });
							hot.setDataAtCell(row, hot.propToCol('businessUnitId'), profile4.value);
						}
						if (prop === 'unitPrice') { // If the change is in the Age column
							var row = change[0];
							var unitPrice = unitPriceCol[row];
							var unitCost = unitPrice * 100; // Apply your formula here
							console.log(unitCost);
							hot.setDataAtCell(row, hot.propToCol('unitCost'), unitCost); // Set the new value for the Salary column
						}
					});
				}
			},
			language: 'pt-BR',
			rowHeaders: true,
			filters: true,
			dropdownMenu: ['filter_by_condition', 'filter_action_bar'],

			columnSorting: true,
			height: '300px',
			licenseKey: 'non-commercial-and-evaluation' // for non-commercial use only
		});

		var button1 = document.getElementById('export-file');

		button1.addEventListener('click', function() {

			var data = hot.getData();

			for (var i = 0; i < data.length; i++) {
				data[i][16] = euro.format(data[i][16]);
				data[i][17] = euro.format(data[i][17]);
				data[i][18] = euro.format(data[i][18]);
				data[i][19] = euro.format(data[i][19]);
				data[i][20] = euro.format(data[i][20]);
				data[i][21] = euro.format(data[i][21]);
				data[i][22] = euro.format(data[i][22]);
				data[i][23] = euro.format(data[i][23]);
				data[i][24] = euro.format(data[i][24]);
				data[i][25] = euro.format(data[i][25]);
				data[i][26] = euro.format(data[i][26]);
				data[i][27] = euro.format(data[i][27]);
			}

		var hot2 = new Handsontable(document.getElementById('excelOrcamentos2'), {
			data: data,
			colHeaders: colHeaders,
			rowHeaders: true,
			licenseKey: 'non-commercial-and-evaluation' // for non-commercial use only
		});

		var exportPlugin1 = hot2.getPlugin('exportFile');

			exportPlugin1.downloadFile('csv', {
				bom: false,
				columnDelimiter: ',',
				columnHeaders: true,
				exportHiddenColumns: true,
				exportHiddenRows: true,
				fileExtension: 'csv',
				filename: 'Tabela_Orçamentos_'+@Html.Raw(Json.Serialize(Model.Nome))+'_[YYYY]-[MM]-[DD]',
				mimeType: 'text/csv',
				rowDelimiter: '\r\n',
				rowHeaders: false
			});
		});

		var pdfButton = document.getElementById('btnPDF');

		pdfButton.addEventListener('click', function() {

			var data = hot.getData();
			window.jsPDF = window.jspdf.jsPDF;

			for (var i = 0; i < data.length; i++) {
				data[i][16] = euro.format(data[i][16]);
				data[i][17] = euro.format(data[i][17]);
				data[i][18] = euro.format(data[i][18]);
				data[i][19] = euro.format(data[i][19]);
				data[i][20] = euro.format(data[i][20]);
				data[i][21] = euro.format(data[i][21]);
				data[i][22] = euro.format(data[i][22]);
				data[i][23] = euro.format(data[i][23]);
				data[i][24] = euro.format(data[i][24]);
				data[i][25] = euro.format(data[i][25]);
				data[i][26] = euro.format(data[i][26]);
				data[i][27] = euro.format(data[i][27]);
			}

			var doc = new jsPDF({
				orientation: "landscape"
			});

			var currentDate = new Date();

			var dateString = currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();

			doc.text('Tabela de Orçamentos - '+@Html.Raw(Json.Serialize(Model.Nome))+' - ' + dateString, 10, 10);

			doc.autoTable({
				head: [colHeaders],
				body: data,
				styles: {
					fontSize: 5 // Set font size to 14
				}
			});

			var dateString = currentDate.getDate() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getFullYear();

			doc.save('Tabela_Orçamentos_'+@Html.Raw(Json.Serialize(Model.Nome))+'_'+dateString+'.pdf');
		});

		function setEuro(){
		var totalCosts = hot.getDataAtCol(24);
		var totalPrices = hot.getDataAtCol(25);
		var countOrcamentos = document.getElementsByClassName('totalCost').length;

			for (let i = 0; i < countOrcamentos; i++) {

				var totalCost = document.getElementById("TotalCost" + i);
				totalCost.innerHTML = euro.format(totalCosts[i]);

				var totalPrice = document.getElementById("TotalPrice" + i);
				totalPrice.innerHTML = euro.format(totalPrices[i]);
	
			}
		}

		setEuro();

		const save = document.querySelector('#save-button');

		var tableData = JSON.stringify(hot.getSourceData());

		//console.log(tableData);

		$("#save-button").click(function () {
			hot.validateCells((valid) => {
				if (valid) {
					$.ajax({
						url: '/Orcamentos/UpdateOrcamentos',
						data: JSON.stringify(hot.getSourceData()),
						dataType: 'json',
						contentType: "application/json",
						type: 'POST',
						success: function (result) {
							//alert("Success");
							getTable();
						},
						error: function (xhr, status, error) {
							alert("Failure: " + error);
						}
					});
				}
				else {
					alert("Erro, verifique se tem alguma célula inválida.");
				}
			})

		});

		function getTable() {

			var id = document.getElementById("orcamentoNomeId").innerHTML;

			$.ajax({
				url: '/OrcamentoNomes/GetTableOrcamentos/',
				dataType: 'json',
				contentType: "application/json",
				type: 'GET',
				data: { id: id },
				success: function (data) {
					hot.loadData(data);
					var i = 0;
					var tableBody = $('#orcamentosTable tbody');
					tableBody.empty(); // clear existing rows
					$.each(data, function (index, item) {
						var orcamentoName = item.OrcamentoName ? item.orcamentoNome.nome : '';
						var profileName = item.profile ? item.profile.name : '';
						var revenueTypeName = item.revenueType ? item.revenueType.nome : '';
						var businessUnitName = item.businessUnit ? item.businessUnit.name : '';

						var row = '<tr>' +
							'<td>' + item.orcamentoName + '</td>' +
                            '<td>' + item.profileName + '</td>' +
                            '<td>' + item.revenueTypeName + '</td>' +
                            '<td>' + item.businessUnitName + '</td>' +
                            '<td>' + item.marca + '</td>' +
                            '<td>' + item.tipoUni + '</td>' +
                            '<td>' + item.partnumb + '</td>' +
                            '<td>' + item.modelo + '</td>' +
                            '<td>' + item.serialNumb + '</td>' +
                            '<td>' + item.productName + '</td>' +
							'<td>' + item.quantidade + '</td>' +
                            '<td id="TotalCost'+i+'" class="totalCost">' + item.totalCost + '</td>' +
                            '<td id="TotalPrice'+i+'">' + item.totalPrice + '</td>' +
                            '<td>' + '<input type="checkbox" disabled ' + (item.ativo ? 'checked' : '') + '></td>' +
                           
							'<td>' +
							'<div class="btn-group" role="group" >' +
							'<div>' +
							'<a href="/orcamentos/details/' + item.id + '" class="btn btn-success rounded-0 rounded-start">' +
							'<i class="bi bi-file-text-fill btn-icon mr-2"></i>' +
							'</a>' +
							'</div>' +
							'<div>' +
							'<a href="/orcamentos/edit/' + item.id + '" class="btn btn-primary rounded-0">' +
							'<i class="bi bi-pencil-square btn-icon mr-2"></i>' +
							'</a>' +
							'</div>' +
							'<div>' +
							'<button type="button" class="btn btn-danger rounded-0 rounded-end" id="EliminarButton' + i + '" data-id="' + item.id + '" onclick="showModalDelete(this.id)">' +
							'<i class="bi bi-trash3-fill btn-icon mr-2"></i>' +
							'</button>' +
							'</div>' +
							'</div>' +
							'</td>' +

                            '</tr>';
						tableBody.append(row);
						i += 1;
					});
					setEuro();
				},
				error: function (xhr, status, error) {
					alert("Failure: " + error);
				}
			});
		}

		function addNewRow() {

			var novaLinha = {
				orcamentoNomeId: @Html.Raw(Json.Serialize(Model.Id)),
				profileId: 1,
				revenueTypeId: 1,
				businessUnitId: 1,
				Marca: "Não definido",
				TipoUni: "Não definido",
				Partnumb: 0,
				modelo: "Não definido",
				SerialNumb: 0,
				ProductName: "Não definido",
				Quantidade: 0,
				UnitPrice: 0,
				UnitCost: 0,
				DescontoTabela: 0,
				PrecoParcial: 0,
				CustoTabela: 0,
				CustoDesc1: 0,
				CustoDesc2: 0,
				CustoDesc3: 0,
				TotalCost: 0,
				TotalPrice: 0,
				Margin: 0,
				MG: 0.00,
				Ativo: false
			};


			$.ajax({
				type: "POST",
				url: "/OrcamentoNomes/AddNewRowOrcamentos",
				data: novaLinha,
				dataType: "json",
				success: function (dataModel) {
					hot.loadData(dataModel);
					getTable();
				},
				error: function (xhr, status, error) {
					console.log(error);
				}
			});

		}

		 var buttonNewRow = document.getElementById("addRowButton")
		 buttonNewRow.addEventListener("click", addNewRow)
	});
</script>
